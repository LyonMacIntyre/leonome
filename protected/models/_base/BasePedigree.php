<?php

/**
 * This is the model base class for the table "pedigree".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Pedigree".
 *
 * Columns in table "pedigree" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $PedigreeId
 * @property string $Name
 * @property integer $SireId
 * @property integer $DamId
 * @property string $Sex
 * @property string $DOB
 * @property string $Coiall
 * @property string $Hd
 * @property string $RegNo
 * @property string $Coi10gen
 * @property string $Hyperlink
 * @property string $Photo
 * @property string $AdRegNo
 * @property string $Ed
 * @property string $Eye
 * @property string $Lpn1
 * @property string $DET
 * @property string $Lpn1ID
 * @property string $Lpnnw
 * @property string $Lpn2
 * @property string $Lpn2ID
 * @property string $Dna
 * @property string $CountryBorn
 * @property string $CountryStay
 * @property string $TatooMicro
 * @property string $KennelName
 * @property string $Thyroid
 * @property string $DThyroid
 * @property string $WebOwner
 *
 */
abstract class BasePedigree extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'pedigree';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Pedigree|Pedigrees', $n);
	}

	public static function representingColumn() {
		return 'Name';
	}

	public function rules() {
		return array(
			array('SireId, DamId', 'numerical', 'integerOnly'=>true),
			array('Name, RegNo, Coi10gen, AdRegNo, Lpn1, CountryBorn, CountryStay, KennelName, Thyroid', 'length', 'max'=>64),
			array('Sex', 'length', 'max'=>10),
			array('Coiall, Hd, Ed, Lpn1ID, Lpnnw, Lpn2, Lpn2ID, Dna, TatooMicro', 'length', 'max'=>32),
			array('Hyperlink, WebOwner', 'length', 'max'=>256),
			array('Photo, Eye', 'length', 'max'=>128),
			array('DOB, DET, DThyroid', 'safe'),
			array('Name, SireId, DamId, Sex, DOB, Coiall, Hd, RegNo, Coi10gen, Hyperlink, Photo, AdRegNo, Ed, Eye, Lpn1, DET, Lpn1ID, Lpnnw, Lpn2, Lpn2ID, Dna, CountryBorn, CountryStay, TatooMicro, KennelName, Thyroid, DThyroid, WebOwner', 'default', 'setOnEmpty' => true, 'value' => null),
			array('PedigreeId, Name, SireId, DamId, Sex, DOB, Coiall, Hd, RegNo, Coi10gen, Hyperlink, Photo, AdRegNo, Ed, Eye, Lpn1, DET, Lpn1ID, Lpnnw, Lpn2, Lpn2ID, Dna, CountryBorn, CountryStay, TatooMicro, KennelName, Thyroid, DThyroid, WebOwner', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'PedigreeId' => Yii::t('app', 'Pedigree'),
			'Name' => Yii::t('app', 'Name'),
			'SireId' => Yii::t('app', 'Sire'),
			'DamId' => Yii::t('app', 'Dam'),
			'Sex' => Yii::t('app', 'Sex'),
			'DOB' => Yii::t('app', 'Dob'),
			'Coiall' => Yii::t('app', 'Coiall'),
			'Hd' => Yii::t('app', 'Hd'),
			'RegNo' => Yii::t('app', 'Reg No'),
			'Coi10gen' => Yii::t('app', 'Coi10gen'),
			'Hyperlink' => Yii::t('app', 'Hyperlink'),
			'Photo' => Yii::t('app', 'Photo'),
			'AdRegNo' => Yii::t('app', 'Ad Reg No'),
			'Ed' => Yii::t('app', 'Ed'),
			'Eye' => Yii::t('app', 'Eye'),
			'Lpn1' => Yii::t('app', 'Lpn1'),
			'DET' => Yii::t('app', 'Det'),
			'Lpn1ID' => Yii::t('app', 'Lpn1'),
			'Lpnnw' => Yii::t('app', 'Lpnnw'),
			'Lpn2' => Yii::t('app', 'Lpn2'),
			'Lpn2ID' => Yii::t('app', 'Lpn2'),
			'Dna' => Yii::t('app', 'Dna'),
			'CountryBorn' => Yii::t('app', 'Country Born'),
			'CountryStay' => Yii::t('app', 'Country Stay'),
			'TatooMicro' => Yii::t('app', 'Tatoo Micro'),
			'KennelName' => Yii::t('app', 'Kennel Name'),
			'Thyroid' => Yii::t('app', 'Thyroid'),
			'DThyroid' => Yii::t('app', 'Dthyroid'),
			'WebOwner' => Yii::t('app', 'Web Owner'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('PedigreeId', $this->PedigreeId);
		$criteria->compare('Name', $this->Name, true);
		$criteria->compare('SireId', $this->SireId);
		$criteria->compare('DamId', $this->DamId);
		$criteria->compare('Sex', $this->Sex, true);
		$criteria->compare('DOB', $this->DOB, true);
		$criteria->compare('Coiall', $this->Coiall, true);
		$criteria->compare('Hd', $this->Hd, true);
		$criteria->compare('RegNo', $this->RegNo, true);
		$criteria->compare('Coi10gen', $this->Coi10gen, true);
		$criteria->compare('Hyperlink', $this->Hyperlink, true);
		$criteria->compare('Photo', $this->Photo, true);
		$criteria->compare('AdRegNo', $this->AdRegNo, true);
		$criteria->compare('Ed', $this->Ed, true);
		$criteria->compare('Eye', $this->Eye, true);
		$criteria->compare('Lpn1', $this->Lpn1, true);
		$criteria->compare('DET', $this->DET, true);
		$criteria->compare('Lpn1ID', $this->Lpn1ID, true);
		$criteria->compare('Lpnnw', $this->Lpnnw, true);
		$criteria->compare('Lpn2', $this->Lpn2, true);
		$criteria->compare('Lpn2ID', $this->Lpn2ID, true);
		$criteria->compare('Dna', $this->Dna, true);
		$criteria->compare('CountryBorn', $this->CountryBorn, true);
		$criteria->compare('CountryStay', $this->CountryStay, true);
		$criteria->compare('TatooMicro', $this->TatooMicro, true);
		$criteria->compare('KennelName', $this->KennelName, true);
		$criteria->compare('Thyroid', $this->Thyroid, true);
		$criteria->compare('DThyroid', $this->DThyroid, true);
		$criteria->compare('WebOwner', $this->WebOwner, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}